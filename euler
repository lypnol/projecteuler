#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# stdlib
import os
import os.path
import argparse
# project
import time
from tools.runner import Runner
from tools.templates import TEMPLATES
from tools.utils import is_tool, tool_for_lang


CMD_RUN = "run"
CMD_NEW = "new"
SOLUTIONS_DIR = "solutions"
FILE_FMT = SOLUTIONS_DIR+"/{:03d}.{}"

ALLOWED_LANGUAGES = ['cpp', 'go', 'js', 'py']
SUPPORTED_LANGUAGES = [l for l in ALLOWED_LANGUAGES if is_tool(tool_for_lang(l))]

LAST_PROBLEM_ID = -1
def _get_last_problem_id():
    global LAST_PROBLEM_ID
    if LAST_PROBLEM_ID != -1:
        return LAST_PROBLEM_ID
    files = sorted(os.listdir(SOLUTIONS_DIR))
    if files:
        LAST_PROBLEM_ID = int(files[-1].split('.')[0])
    else:
        LAST_PROBLEM_ID = 0
    return LAST_PROBLEM_ID

def new(problem_id=0, language=""):
    problem_id = problem_id if problem_id > 0 else (_get_last_problem_id()+1)
    filepath = FILE_FMT.format(problem_id, language)
    if os.path.exists(filepath):
        raise Exception("{} not empty".format(filepath))
    with open(filepath, "w") as file:
        file.write(TEMPLATES[language])
    print("created", filepath)

def run(problem_id=0):
    problem_id = problem_id if problem_id > 0 else _get_last_problem_id()
    filepath, language = None, None
    for language in ALLOWED_LANGUAGES:
        fp = FILE_FMT.format(problem_id, language)
        if os.path.exists(fp):
            filepath = fp
            break
    if filepath is None:
        raise Exception("{} does not exist".format(filepath))
    runner = Runner(language, filepath)
    print("runing {}".format(filepath))
    start = time.time()
    runner.run()
    end = time.time()
    print("time {:.3f} ms".format((end-start)*1000))

def main():
    parser = argparse.ArgumentParser(description="Project euler solutions manager")
    parser.add_argument("command", type=str, choices=[CMD_RUN, CMD_NEW])
    parser.add_argument("-p", "--problem", help="Problem id", type=int, default=0)
    parser.add_argument("-l", "--language", help="Programming language of solution code",
                        type=str, choices=SUPPORTED_LANGUAGES, default="cpp")
    args = parser.parse_args()
    if args.command == CMD_NEW:
        new(args.problem, args.language)
    elif args.command == CMD_RUN:
        run(args.problem)

if __name__ == "__main__":
    main()
